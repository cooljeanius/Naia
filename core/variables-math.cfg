#
# WML variable operations library
#
# codename Naia - Project Ethea phase 1 campaigns shared library
# Copyright (C) 2006 - 2023 by Iris Morelle <shadowm@wesnoth.org>
#
# See COPYING for usage terms.
#

############################################################################
#                           ARITHMETIC OPERATIONS                          #
############################################################################

#
# _VAR += _OPERAND
#

#define VARIABLE_ADD _VAR _OPERAND
    [set_variable]
        name={_VAR}
        add={_OPERAND}
    [/set_variable]
#enddef

#
# _VAR -= _OPERAND
#

#define VARIABLE_MINUS _VAR _OPERAND
    [set_variable]
        name={_VAR}
        sub={_OPERAND}
    [/set_variable]
#enddef

#define VARIABLE_MIN _VAR _OPERAND
    {VARIABLE_MINUS {_VAR} {_OPERAND}}
#enddef

#
# _VAR *= _OPERAND
#

#define VARIABLE_MULTIPLY _VAR _OPERAND
    [set_variable]
        name={_VAR}
        multiply={_OPERAND}
    [/set_variable]
#enddef

#define VARIABLE_MUL _VAR _OPERAND
    {VARIABLE_MULTIPLY {_VAR} {_OPERAND}}
#enddef

#
# _VAR /= _OPERAND
#

#define VARIABLE_DIVIDE _VAR _OPERAND
    [set_variable]
        name={_VAR}
        divide={_OPERAND}
    [/set_variable]
#enddef

#define VARIABLE_DIV _VAR _OPERAND
    {VARIABLE_DIVIDE   {_VAR} {_OPERAND}}
#enddef

#
# _VAR %= _OPERAND
#

#define VARIABLE_MODULO _VAR _OPERAND
    [set_variable]
        name={_VAR}
        modulo={_OPERAND}
    [/set_variable]
#enddef

#define VARIABLE_MOD _VAR _OPERAND
    {VARIABLE_MODULO   {_VAR} {_OPERAND}}
#enddef

#
# _VAR *= -1
#

#define VARIABLE_NEG _VAR
    [set_variable]
        name={_VAR}
        multiply=-1
    [/set_variable]
#enddef

#
# ++_VAR
#

#define VARIABLE_INC _VAR
    [set_variable]
        name={_VAR}
        add=1
    [/set_variable]
#enddef

#
# --_VAR
#

#define VARIABLE_DEC _VAR
    [set_variable]
        name={_VAR}
        sub=1
    [/set_variable]
#enddef

############################################################################
#                           COMPARISON OPERATORS                           #
############################################################################

#
# _VAR == _VALUE
#

#define VARIABLE_NUMERICAL_EQUALS _VAR _VALUE
    [variable]
        name={_VAR}
        numerical_equals={_VALUE}
    [/variable]
#enddef

#
# _VAR != _VALUE
#

#define VARIABLE_NUMERICAL_NOT_EQUALS _VAR _VALUE
    [variable]
        name={_VAR}
        numerical_not_equals={_VALUE}
    [/variable]
#enddef

#
# _VAR < _VALUE
#

#define VARIABLE_NUMERICAL_LESS_THAN _VAR _VALUE
    [variable]
        name={_VAR}
        less_than={_VALUE}
    [/variable]
#enddef

#
# _VAR > _VALUE
#

#define VARIABLE_NUMERICAL_GREATER_THAN _VAR _VALUE
    [variable]
        name={_VAR}
        greater_than={_VALUE}
    [/variable]
#enddef

#
# _VAR <= _VALUE
#

#define VARIABLE_NUMERICAL_LESS_THAN_OR_EQUAL _VAR _VALUE
    [variable]
        name={_VAR}
        less_than_equal_to={_VALUE}
    [/variable]
#enddef

#
# _VAR >= _VALUE
#

#define VARIABLE_NUMERICAL_GREATER_THAN_OR_EQUAL _VAR _VALUE
    [variable]
        name={_VAR}
        greater_than_equal_to={_VALUE}
    [/variable]
#enddef

#
# _VAR % 2 == 0
#

#define VARIABLE_IS_EVEN _VAR
    [variable_is_even]
        name={_VAR}
    [/variable_is_even]
#enddef

#
# _VAR % 2 != 0
#

#define VARIABLE_IS_ODD _VAR
    [not]
        [variable_is_even]
            name={_VAR}
        [/variable_is_even]
    [/not]
#enddef

#
# _VAR >= _BOTTOM && _VAR <= _TOP
#

#define VARIABLE_NUMERICAL_IN_RANGE _VAR _BOTTOM _TOP
    [variable]
        name={_VAR}
        greater_than_equal_to={_BOTTOM}
    [/variable]
    [variable]
        name={_VAR}
        less_than_equal_to={_TOP}
    [/variable]
#enddef

#
# _VAR.x == _X && _VAR.y == _Y
#

#define VARIABLE_POS_EQUALS _VAR _X _Y
    [position_equals]
        variable={_VAR}
        x={_X}
        y={_Y}
    [/position_equals]
#enddef
